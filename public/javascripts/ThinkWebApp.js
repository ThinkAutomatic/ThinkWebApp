// Generated by CoffeeScript 2.5.1
(function() {
  $(document).on('pagecreate', function() {
    var actionTypes, addNumProp, addProp, alertDialog, camelCaseToSpaced, checkMode, confirmDialog, convertToISOTimeFormat, convertToLocalTime, currentActionType, dateTimeFromStr, deviceType, deviceTypeStep, dtSearchTextBlur, editObject, errorCheck, eventCommandName, exitFullscreen, fixedEncodeURI, getCookie, getDeviceTypeInfo, getInstructionsPopup, getNamePopup, gotoHelpStep, gotoPrevStep, gotoStep, handleDeviceTypeWizardStep, handleHelpStep, handleHelpYesNo, handleStep, handleYesNo, helpPopupInfo, helpStep, isValid, launchFullscreen, linkDevicePopup, loadDeviceTypeWithChanges, modeName, modeNames, modes, newAttrName, padNum, passwordVisible, registerDeviceType, saveAsDraft, selectModesPopup, sendPhraseCommand, sendSlideEvents, setTitlePrompt, singleActionAdd, socket, submitKey, timeZone, trimTrailingChars, updateDtSearch, urlToThinkAutomatic, yesNoAnswer, yesNoHelpPopup, yesNoPopup;
    urlToThinkAutomatic = '/api/';
    socket = null;
    setTimeout((function() {
      if (getCookie('accessToken')) {
        socket = new WebSocket("wss://socket.thinkautomatic.io?token=" + getCookie('accessToken'));
        return socket.onmessage = function(evt) {
          var parsedData;
          parsedData = JSON.parse(evt.data);
          if (parsedData) {
            if (parsedData['sceneChange']) {
              $("div[data-tab='room-" + parsedData['sceneChange']['roomId'].toString() + "'] input[type='radio']").prop('checked', false);
              $('#radio-scene-' + parsedData['sceneChange']['sceneId'].toString()).prop('checked', true);
              return $('.sceneChoice').checkboxradio('refresh');
            } else if (parsedData['deviceStatusChange']) {
              if (parsedData['deviceStatusChange']['isOnline']) {
                return $('[data-span-deviceId=' + parsedData['deviceStatusChange']['deviceId'].toString() + ']').removeClass('clr-grey');
              } else {
                return $('[data-span-deviceId=' + parsedData['deviceStatusChange']['deviceId'].toString() + ']').addClass('clr-grey');
              }
            } else if (parsedData['newDevices'] && getCookie('userId')) {
              return new $.nd2Toast({
                ttl: 30000,
                message: "New device(s) discovered",
                action: {
                  title: "link",
                  fn: linkDevicePopup,
                  color: "lime"
                }
              });
            }
          }
        };
      }
    }), 100);
    setTimeout((function() {
      if ($('#newDevices').length && getCookie('userId')) {
        return new $.nd2Toast({
          ttl: 30000,
          message: "New device(s) discovered",
          action: {
            title: "link",
            fn: linkDevicePopup,
            color: "lime"
          }
        });
      }
    }), 100);
    jQuery["taPost"] = function(path, data, callback) {
      if ($.isFunction(data)) {
        callback = data;
        data = void 0;
      }
      return $.ajax({
        url: urlToThinkAutomatic + path,
        type: "POST",
        contentType: "application/json",
        data: JSON.stringify(data),
        success: callback
      });
    };
    jQuery["taDelete"] = function(path, callback) {
      return $.ajax({
        url: urlToThinkAutomatic + path,
        type: "DELETE",
        contentType: "application/json",
        success: callback
      });
    };
    jQuery["taGet"] = function(path, data, callback) {
      if ($.isFunction(data)) {
        callback = data;
        data = void 0;
      }
      if (data) {
        return $.ajax({
          url: urlToThinkAutomatic + path,
          type: "GET",
          contentType: "application/json",
          data: $.param(data),
          success: callback
        });
      } else {
        return $.ajax({
          url: urlToThinkAutomatic + path,
          type: "GET",
          contentType: "application/json",
          success: callback
        });
      }
    };
    isValid = function(attrib) {
      return typeof attrib !== 'undefined' && attrib !== false && attrib !== null;
    };
    fixedEncodeURI = function(str) {
      return encodeURI(str).replace('[', /%5B/g).replace(']', /%5D/g).replace('#', '%23');
    };
    trimTrailingChars = function(s, charToTrim) {
      var regExp, result;
      regExp = new RegExp(charToTrim + '+$');
      result = s.replace(regExp, '');
      return result;
    };
    getCookie = function(name) {
      var parts, value;
      value = '; ' + document.cookie.replace(/%20/g, ' ');
      parts = value.split('; ' + name + '=');
      if (parts.length === 2) {
        return parts.pop().split(';').shift();
      } else {
        return void 0;
      }
    };
    camelCaseToSpaced = function(stringValue) {
      var result;
      result = stringValue.replace(/([A-Z]+)/g, " $1").replace(/([A-Z][a-z])/g, " $1");
      return result.charAt(0).toUpperCase() + result.slice(1);
    };
    launchFullscreen = function(element) {
      if (element.requestFullscreen) {
        return element.requestFullscreen();
      } else if (element.mozRequestFullScreen) {
        return element.mozRequestFullScreen();
      } else if (element.webkitRequestFullscreen) {
        return element.webkitRequestFullscreen();
      } else if (element.msRequestFullscreen) {
        return element.msRequestFullscreen();
      }
    };
    exitFullscreen = function() {
      if (document.exitFullscreen) {
        return document.exitFullscreen();
      } else if (document.mozCancelFullScreen) {
        return document.mozCancelFullScreen();
      } else if (document.webkitExitFullscreen) {
        return document.webkitExitFullscreen();
      }
    };
    alertDialog = function(title, text) {
      var params;
      params = {};
      params['message'] = text;
      params['ttl'] = 5000;
      return new $.nd2Toast(params);
    };
    errorCheck = function(data) {
      if (data && isValid(data['error'] && data['error']['message'])) {
        alertDialog('Error', data['error']['message']);
        return false;
      } else {
        return true;
      }
    };
    confirmDialog = function(title, text, yesCallback, noCallback) {
      if (confirm(text)) {
        if (yesCallback) {
          return yesCallback();
        }
      } else if (noCallback) {
        return noCallback();
      }
    };
    timeZone = function() {
      var zoneVal;
      zoneVal = -(new Date().getTimezoneOffset() / 60);
      if (zoneVal < 0) {
        zoneVal = -1 * zoneVal;
        return '-' + zoneVal.toString().padStart(2, '0');
      } else {
        return '+' + zoneVal.toString().padStart(2, '0');
      }
    };
    padNum = function(n) {
      if (n < 10) {
        return '0' + n.toString();
      } else {
        return n.toString();
      }
    };
    dateTimeFromStr = function(datetimeStr) {
      var arr;
      arr = (datetimeStr + '+00').split(/[- :\+]/);
      return new Date(parseInt(arr[0]), parseInt(arr[1]) - 1, parseInt(arr[2]), parseInt(arr[3]), parseInt(arr[4]), parseInt(arr[5]));
    };
    convertToLocalTime = function(datetimeStr) {
      var dt;
      dt = dateTimeFromStr(datetimeStr);
      dt.setHours(dt.getHours() - (new Date().getTimezoneOffset() / 60));
      return dt.getFullYear().toString() + '-' + padNum(dt.getMonth() + 1) + '-' + padNum(dt.getDate()) + ' ' + padNum(dt.getHours()) + ':' + padNum(dt.getMinutes()) + timeZone();
    };
    convertToISOTimeFormat = function(datetimeStr) {
      var dt;
      dt = dateTimeFromStr(datetimeStr);
      return dt.toISOString();
    };
    $('.dtPicker').appendDtpicker({
      'closeOnSelected': true,
      'futureOnly': true,
      'autodateOnStart': true
    });
    $('.shareKey').click(function() {
      //    alert((new Date()).toString())
      //    alert((new Date('2016-04-28 19:02:00+00')).toString())
      //    alert((new Date()) > (new Date('2016-04-28 19:02:00+00')))
      $('#keyPopupTitle').text('New Home Key');
      $('#deleteKey').hide();
      $('#editKeyName').val('');
      $('#dtPickerStart').val('');
      $('#dtPickerEnd').val('');
      $('#editKeyPopupDialog').removeAttr('data-homeKeyId');
      $('#editKeyPopupDialog').removeAttr('data-token');
      return $('#editKeyPopupDialog').popup('open');
    });
    $('.editHomeKey').click(function() {
      $.mobile.loading('show');
      $('#keyPopupTitle').text('Edit Home Key');
      $('#deleteKey').show();
      return $.taGet('homeKeys/' + $(this).attr('data-homeKeyId'), function(response) {
        $.mobile.loading('hide');
        if (response === null) {
          return alertDialog('', 'Unable to access key');
        } else {
          $('#editKeyPopupDialog').attr('data-homeKeyId', response['homeKeyId']);
          $('#editKeyPopupDialog').attr('data-token', response['token']);
          if (response['name']) {
            $('#editKeyPopupDialog').attr('data-keyName', response['name']);
          } else {
            $('#editKeyPopupDialog').attr('data-keyName', 'key: ' + response['homeKeyId'].toString());
          }
          $('#editKeyName').val(response['name']);
          $('#dtPickerStart').val('');
          $('#dtPickerEnd').val('');
          if (response['validStart']) {
            $('#dtPickerStart').val(convertToLocalTime(response['validStart']));
          }
          if (response['expiration']) {
            $('#dtPickerEnd').val(convertToLocalTime(response['expiration']));
          }
          return $('#editKeyPopupDialog').popup('open');
        }
      });
    });
    $('#deleteKey').click(function(event) {
      return confirmDialog('Confirm', 'Delete ' + $('#editKeyPopupDialog').attr('data-keyName') + '? Cannot be undone.', function() {
        $.mobile.loading('show');
        return $.taDelete('homeKeys/' + $('#editKeyPopupDialog').attr('data-homeKeyId'), function(response) {
          window.location.href = '/homes/keys';
          return true;
        });
      }, function() {
        return false;
      });
    });
    submitKey = function(cb) {
      var path, postData;
      postData = {};
      postData['name'] = $('#editKeyName').val();
      postData['homeId'] = parseInt(getCookie('homeId'));
      if ($('#dtPickerStart').val()) {
        postData['validStart'] = convertToISOTimeFormat($('#dtPickerStart').val().toString());
      }
      if ($('#dtPickerEnd').val()) {
        postData['expiration'] = convertToISOTimeFormat($('#dtPickerEnd').val().toString());
      }
      if ($('#editKeyPopupDialog').attr('data-homeKeyId')) {
        path = 'homeKeys/' + $('#editKeyPopupDialog').attr('data-homeKeyId');
      } else {
        path = 'homeKeys';
      }
      return $.taPost(path, postData, cb);
    };
    $('.editKeyForm').submit(function() {
      $.mobile.loading('show');
      return submitKey(function(response) {
        $.mobile.loading('hide');
        if (errorCheck(response)) {
          window.location.href = '/homes/keys';
          setTimeout((function() {
            return window.location.reload();
          }), 100);
          return true;
        } else {
          return false;
        }
      });
    });
    $('#editKeyShare').click(function() {
      $.mobile.loading('show');
      return submitKey(function(response) {
        $.mobile.loading('hide');
        if (isValid(response['error'] && response['error']['message'])) {
          return alertDialog('Error', response['error']['message']);
        } else {
          $('#editKeyPopupDialog').popup('close');
          return setTimeout((function() {
            $('#shareKeyPopupTitle').text('Share ' + response['homeName'] + ' Key');
            $('#keyLink').text('https://app.thinkautomatic.io/homes?homeId=' + response['homeId'].toString() + '&homeKey=' + response['keyToken']);
            return $('#shareKeyPopupDialog').popup('open');
          }), 100);
        }
      });
    });
    $('#copyLinkToClipboard').click(function() {
      var result;
      $('#keyLink').focus();
      $('#keyLink').select();
      try {
        $('#keyLink').setSelectionRange(0, $('#keyLink').value.length);
      } catch (error) {}
      result = document.execCommand('copy');
      if (result) {
        return $('#copyLinkToClipboard').text('Link copied');
      } else {
        return $('#copyLinkToClipboard').text('Unable to copy link');
      }
    });
    $('#shareKeyPopupDialog').on('popupafterclose', function() {
      $.mobile.loading('show');
      return window.location.reload();
    });
    $('#editKeyPopupDialog').on('popupafterclose', function() {
      return $('.dtPicker').each(function() {
        return $(this).handleDtpicker('hide');
      });
    });
    sendPhraseCommand = function(phraseElem) {
      var postData;
      postData = {};
      postData['phrase'] = $('.nd2Tabs-active').attr('data-roomName') + ' ' + phraseElem.val();
      phraseElem.val('');
      $.mobile.loading('show');
      return $.taPost('commands/' + getCookie('roomId').toString() + '/phrase', postData, function(response) {
        var params;
        if (response && response['message']) {
          $.mobile.loading('hide');
          params = {};
          params['message'] = response['message'];
          params['ttl'] = 10000;
          return new $.nd2Toast(params);
        } else if (errorCheck(response)) {
          $.mobile.loading('show');
          window.location.href = '/';
          return true;
        }
      });
    };
    $('.phraseVal').click(function() {
      if ($(this).val() !== '') {
        return sendPhraseCommand($(this));
      }
    });
    $('.phraseVal').blur(function() {
      if ($(this).val() !== '') {
        return sendPhraseCommand($(this));
      }
    });
    $('#roomTabs').click(function(event, ui) {
      var postData, roomId;
      postData = {};
      roomId = $('.nd2Tabs-active').attr('data-roomId');
      postData['roomId'] = roomId;
      return $.post('/rooms/select', postData, function(response) {
        $('.showDevices').attr('href', '#room-' + roomId + '-device-panel');
        if (roomId === '0') {
          return setTimeout((function() {
            return $('.showDevices').trigger('click');
          }), 100);
        }
      });
    });
    $('.homeChoice').click(function() {
      $.mobile.loading('show');
      window.location.href = '/?homeId=' + $(this).attr('data-homeId');
      return true;
    });
    $('.sceneChoice').click(function(event) {
      return $.taPost('scenes/' + $(this).attr('data-sceneId') + '/select', {}, function(response) {
        errorCheck(response);
        return false;
      });
    });
    $('.cancelSelectDeviceType').click(function(event) {
      return $('#deviceTypesDiv').hide();
    });
    $('#linkDeviceRoomSelect').change(function() {
      var roomIdSelected;
      if ($(this).attr('data-initializing') === 'true') {
        $(this).removeAttr('data-initializing');
        return false;
      } else {
        roomIdSelected = $(this).find('option:selected').val();
        if (roomIdSelected === '0') {
          $('#deleteObject').hide();
          $('#linkDevicePopupDialog').attr('data-reload', 'false');
          $('#linkDevicePopupDialog').popup('close');
          return setTimeout((function() {
            return editObject('Add New Room', 'rooms', 'Name for new room', 'false');
          }), 100);
        }
      }
    });
    $('#linkDeviceSubmit').click(function(event) {
      var deviceSelected, linkMessage, linkPath, postData, roomIdSelected;
      postData = {};
      linkPath = '';
      linkMessage = '';
      $.mobile.loading('show');
      roomIdSelected = $('#linkDeviceRoomSelect').find('option:selected').val();
      if (roomIdSelected === '1') {
        linkMessage = 'Link command sent for current home';
        linkPath = 'homes/' + getCookie('homeId').toString() + '/link';
      } else {
        linkMessage = 'Link command sent for ' + $('#linkDeviceRoomSelect').find('option:selected').text();
        linkPath = 'rooms/' + roomIdSelected.toString() + '/link';
      }
      if ($('#linkDeviceSelectDiv').is(":visible")) {
        deviceSelected = $('#linkDeviceSelect').find('option:selected');
        if (deviceSelected.attr('data-directUrl')) {
          linkPath = '/devices/link?directUrl=' + deviceSelected.attr('data-directUrl');
          if (roomIdSelected !== '1') {
            linkPath += '&roomId=' + roomIdSelected.toString();
          }
          $.mobile.loading('show');
          window.location.href = linkPath;
          return true;
        }
        if (deviceSelected.attr('data-proxyDeviceId')) {
          linkPath += 'Token';
          $.taPost(linkPath, {}, function(response) {
            if (response['linkToken']) {
              return $.taPost('commands/' + deviceSelected.attr('data-proxyDeviceId').toString(), response, function(cmdResponse) {
                alertDialog('', linkMessage);
                return setTimeout((function() {
                  $.mobile.loading('hide');
                  window.location.href = '/';
                  return true;
                }), 4000);
              });
            }
          });
        }
        return true;
      }
      if ($('#linkDeviceName').attr('data-name')) {
        postData['name'] = $('#linkDeviceName').attr('data-name');
      }
      if ($('#deviceTypesDiv').is(":visible")) {
        postData['deviceTypeUuid'] = $('#selectDeviceTypeSelect option:selected').val();
        return $.taGet('deviceTypes/' + postData['deviceTypeUuid'], function(dtResponse) {
          $.mobile.loading('hide');
          if (dtResponse !== null) {
            if (dtResponse['preLinkInstructions']) {
              alert(dtResponse['preLinkInstructions']);
            }
            $.mobile.loading('show');
            return $.taPost(linkPath, postData, function(response) {
              $.mobile.loading('hide');
              if (!dtResponse['postLinkInstructions']) {
                return alertDialog('', linkMessage);
              } else {
                if (response['linkCode']) {
                  return alert(dtResponse['postLinkInstructions'].replace('{linkCode}', response['linkCode'].toString()) + '   Link code: ' + response['linkCode'].toString());
                } else {
                  return alert(dtResponse['postLinkInstructions']);
                }
              }
            });
          } else {
            return alertDialog('Error', 'Unable to find device type information.');
          }
        });
      } else {
        $.mobile.loading('show');
        return $.taPost(linkPath, postData, function(response) {
          $.mobile.loading('hide');
          alertDialog('', linkMessage);
          return setTimeout((function() {
            window.location.href = '/';
            return true;
          }), 2000);
        });
      }
    });
    linkDevicePopup = function() {
      $.taGet('devices/discover', function(deviceInfoArray) {
        $('#linkDeviceName').hide();
        if (deviceInfoArray.length === 0) {
          $('#linkDeviceType').show();
          return $('#linkDeviceSelectDiv').hide();
        } else {
          $('#linkDeviceType').hide();
          $('#linkDeviceSelectdiv').show();
          $.each(deviceInfoArray, function(index, value) {
            return $('#linkDeviceSelect').append('<option value=' + index.toString() + ' data-' + (value['proxyDeviceId'] ? 'proxyDeviceId=' + value['proxyDeviceId'] : 'directUrl=' + value['directUrl']) + '>' + value['name'] + '</option>');
          });
          return $('#linkDeviceSelect').val(0).change();
        }
      });
      if (getCookie('roomId')) {
        $('#linkDeviceRoomSelect').attr('data-initializing', 'true');
        $('#linkDeviceRoomSelect').val(getCookie('roomId')).change();
      }
      return setTimeout((function() {
        return $('#linkDevicePopupDialog').popup('open');
      }), 100);
    };
    $('#deviceTypeSearchSubmit').click(function(event) {
      var params;
      params = {};
      $.mobile.loading('show');
      params['filter'] = $('#deviceTypeSearch').val();
      return $.taGet('deviceTypes/search', params, function(response) {
        var selectedOne;
        $.mobile.loading('hide');
        if (response === null) {
          return alertDialog('', 'No matching device types found');
        } else {
          $('#selectDeviceTypeSelect').find('option').remove();
          $('#deviceTypesDiv').show();
          selectedOne = null;
          $.each(response, function(index, value) {
            $('#selectDeviceTypeSelect').append('<option value=' + value['deviceTypeUuid'] + '>' + value['name'] + ' [' + value['ownerUserName'] + ']</option>');
            if (selectedOne === null) {
              return selectedOne = value['deviceTypeUuid'];
            }
          });
          return $('#selectDeviceTypeSelect').val(selectedOne).change();
        }
      });
    });
    $('#linkDeviceType').click(function(event) {
      $('#linkDevicePopupDialog').attr('data-reload', 'false');
      $('#linkDevicePopupDialog').popup('close');
      return setTimeout((function() {
        return $('#selectDeviceTypePopupDialog').popup('open');
      }), 100);
    });
    $('#linkDeviceName').click(function(event) {
      $('#deleteObject').hide();
      $('#linkDevicePopupDialog').attr('data-reload', 'false');
      $('#linkDevicePopupDialog').popup('close');
      return setTimeout((function() {
        return editObject('Device Name', null, 'Name for new device', 'true');
      }), 100);
    });
    sendSlideEvents = function(slider) {
      var postData;
      postData = {};
      postData[slider.attr('data-actionName')] = slider.val().toString();
      if ((slider.attr('data-sliding').toString() === 'true') && (slider.attr('data-lastVal') === slider.val().toString())) {
        setTimeout((function() {
          return sendSlideEvents(slider);
        }), 100);
        return;
      }
      slider.attr('data-lastVal', slider.val().toString());
      return $.taPost('commands/' + slider.attr('data-deviceId').toString(), postData, function(response) {
        if (slider.attr('data-sliding').toString() === 'true') {
          return setTimeout((function() {
            return sendSlideEvents(slider);
          }), 100);
        } else {
          return $.taPost('devices/' + slider.attr('data-deviceId').toString(), postData, function(response) {
            errorCheck(response);
          });
        }
      });
    };
    $('#deviceTypeSelectSubmit').click(function(event) {
      var cache;
      if ($('#deviceTypesDiv').is(":visible")) {
        cache = $('#linkDeviceType').children();
        $('#linkDeviceType').empty();
        $('#linkDeviceType').text($('#selectDeviceTypeSelect option:selected').text()).append(cache);
      }
      return $('#selectDeviceTypePopupDialog').popup('close');
    });
    $('#selectDeviceTypePopupDialog').on('popupafterclose', function() {
      return $('#linkDevicePopupDialog').popup('open');
    });
    $('#linkDevicePopupDialog').on('popupafterclose', function() {
      if ($('#linkDevicePopupDialog').attr('data-reload') === 'true') {
        $.mobile.loading('show');
        return window.location.reload();
      } else {
        return $('#linkDevicePopupDialog').attr('data-reload', 'true');
      }
    });
    $('#devicePopupDialog').on('popupafterclose', function() {
      if ($('#devicePopupDialog').attr('data-reload') === 'true') { // || true
        $.mobile.loading('show');
        return window.location.reload();
      }
    });
    $('#deviceRoomSelect').change(function() {
      var deviceId, optionSelected;
      if ($(this).attr('data-initializing') === 'true') {
        $(this).removeAttr('data-initializing');
        return false;
      } else {
        optionSelected = $(this).find('option:selected');
        deviceId = $(this).attr('data-DeviceId').toString();
        return confirmDialog('Confirm', 'Move ' + $(this).attr('data-DeviceName') + ' to ' + optionSelected.text() + '?', function() {
          var postData;
          postData = {};
          postData['roomId'] = parseInt(optionSelected.val());
          $.mobile.loading('show');
          return $.taPost('devices/' + deviceId, postData, function(response) {
            if (errorCheck(response)) {
              window.location.href = '/';
              return true;
            } else {
              return false;
            }
          });
        }, function() {
          return false;
        });
      }
    });
    $('.linkDevicePopup').click(function(event) {
      return linkDevicePopup();
    });
    handleStep = function(element, direction) {
      var buttonValue, parentElem, postData, stepValue, valueElem;
      parentElem = element.parent();
      valueElem = parentElem.find('.buttonValue');
      buttonValue = parseInt(valueElem.text());
      stepValue = parseInt(parentElem.attr('data-rangeStep'));
      if (direction === 'plus' && (buttonValue + stepValue <= parseInt(parentElem.attr('data-rangeHigh')))) {
        buttonValue += stepValue;
      } else if (direction === 'minus' && (buttonValue - stepValue >= parseInt(parentElem.attr('data-rangeLow')))) {
        buttonValue -= stepValue;
      }
      valueElem.text(buttonValue.toString());
      postData = {};
      postData[parentElem.attr('data-actionName')] = buttonValue.toString();
      return $.taPost('devices/' + parentElem.attr('data-deviceId').toString(), postData, function(response) {
        return errorCheck(response);
      });
    };
    $(document).on('click', '.buttonPlus', function(event) {
      return handleStep($(this), 'plus');
    });
    $(document).on('click', '.buttonMinus', function(event) {
      return handleStep($(this), 'minus');
    });
    $(document).on('change', '.modeSelect', function(event) {
      var postData;
      postData = {};
      postData[$(this).attr('data-modeName')] = $(this).find('option:selected').val();
      $.mobile.loading('show');
      return $.taPost('devices/' + $(this).attr('data-deviceId').toString(), postData, function(response) {
        errorCheck(response);
        return setTimeout((function() {
          return window.location.reload();
        }), 100);
      });
    });
    checkMode = function(device, modes, actionType) {
      var result;
      result = true;
      if (modes) {
        $.each(modes, function(modeName, modeValues) {
          if (device[modeName] && actionType['modes'] && actionType['modes'][modeName]) {
            if (0 > $.inArray(device[modeName], actionType['modes'][modeName])) {
              return result = false;
            }
          }
        });
      }
      return result;
    };
    $('.device').click(function(event) {
      var cache, deviceId;
      $('[data-role=panel]').panel('close');
      cache = $('#devicePopupTitle').children();
      $('#devicePopupTitle').text('Loading...');
      $('#devicePopupSettingControls').empty();
      $('#devicePopupControls').empty();
      $('#devicePopupEmpty').hide();
      $('#deviceDirectUrlDiv').hide();
      $('#devicePopupSettings').hide();
      $('#devicePopupDialog').popup('open');
      deviceId = $(this).attr('data-deviceId');
      return $.taGet('devices/' + deviceId.toString(), function(deviceInfo) {
        if (deviceInfo['deviceId']) {
          return $.taGet('devices/' + deviceId.toString() + '/deviceType', function(deviceTypeInfo) {
            var modeHTML;
            if (deviceInfo['name']) {
              $('#devicePopupTitle').text(deviceInfo['name']).append(cache);
              $('#deleteDevice').attr('data-objectName', deviceInfo['name']);
            } else {
              $('#devicePopupTitle').text(deviceTypeInfo['name']).append(cache);
              $('#deleteDevice').attr('data-objectName', deviceTypeInfo['name']);
            }
            $('#deleteDevice').attr('data-path', 'devices/' + deviceInfo['deviceId'].toString());
            $('#deviceRoomSelect').attr('data-deviceId', deviceId);
            $('#deviceRoomSelect').attr('data-deviceName', $('#deleteDevice').attr('data-objectName'));
            $('#deviceRoomSelect').attr('data-initializing', 'true');
            if (deviceInfo['roomId']) {
              $('#deviceRoomSelect').val(deviceInfo['roomId']).change();
            } else {
              $('#deviceRoomSelect').val('0').change();
            }
            $('#devicePopupEmpty').show();
            if (deviceTypeInfo['modes']) {
              modeHTML = '';
              $.each(deviceTypeInfo['modes'], function(modeName, modeValues) {
                modeHTML += '<label for="modeSelect-' + modeName + '">' + camelCaseToSpaced(modeName) + ':</label><select class="modeSelect" data-modeName="' + modeName + '" data-deviceId="' + deviceInfo['deviceId'].toString() + '" id="modeSelect-' + modeName + '" name="modeSelect-' + modeName + '">';
                $.each(modeValues, function(i, modeValue) {
                  var selectedStr;
                  selectedStr = '';
                  if (deviceInfo[modeName] && (deviceInfo[modeName] === modeValue)) {
                    selectedStr = '" selected="selected';
                  }
                  return modeHTML += '<option value="' + modeValue + selectedStr + '">' + modeValue + '</option>';
                });
                return modeHTML += '</select>';
              });
              $('#devicePopupControls').append(modeHTML).trigger('create');
            }
            if (deviceTypeInfo['actionTypes']) {
              $.each(deviceTypeInfo['actionTypes'], function(i, actionType) {
                var control, currentLevel, currentState, flipId, selectedStr, sliderId, stepperId;
                if (actionType['receive'] && checkMode(deviceInfo, deviceTypeInfo['modes'], actionType)) {
                  $('#devicePopupEmpty').hide();
                  control = $('#devicePopupControls');
                  if (actionType['isSetting']) {
                    $('#devicePopupSettings').show();
                    control = $('#devicePopupSettingControls');
                  }
                  if (isValid(actionType['rangeLow']) && isValid(actionType['rangeHigh'])) {
                    currentLevel = actionType['rangeLow'];
                    if (deviceInfo[actionType['name']]) {
                      currentLevel = deviceInfo[actionType['name']];
                    }
                    if (isValid(actionType['rangeStep'])) {
                      stepperId = 'stepper-' + deviceId.toString() + actionType['name'];
                      return control.append(`<label for=\"` + stepperId + '">' + camelCaseToSpaced(actionType['name']) + `:</label>
<div id=\"` + stepperId + '" name="' + stepperId + '" class="box" data-deviceId="' + deviceId.toString() + '" data-actionName="' + actionType['name'] + '" data-rangeStep="' + actionType['rangeStep'] + '" data-rangeLow="' + actionType['rangeLow'] + '" data-rangeHigh="' + actionType['rangeHigh'] + `\">
<a href="#" class="ui-btn ui-btn-inline ui-btn-raised buttonMinus"><i class="zmdi zmdi-minus zmd-2x"></i></a>
<a href="#" class="ui-btn ui-btn-inline buttonValue">` + currentLevel + `</a>
  <a href="#" class="ui-btn ui-btn-inline ui-btn-raised buttonPlus"><i class="zmdi zmdi-plus zmd-2x"></i></a>
</div>`).trigger('create');
                    } else {
                      sliderId = 'slider-' + deviceId.toString() + actionType['name'];
                      control.append('<label for="' + sliderId + '">' + camelCaseToSpaced(actionType['name']) + ':</label>').trigger('create');
                      control.append('<input id="' + sliderId + '" data-sliding="false" data-deviceId="' + deviceId.toString() + '" data-actionName="' + actionType['name'] + '" type="range" name="' + sliderId + '" data-lastVal="' + currentLevel + '" value="' + currentLevel + '" min="' + actionType['rangeLow'] + '" max="' + actionType['rangeHigh'] + '" data-highlight="true">').trigger('create');
                      return $('#' + sliderId).slider({
                        start: function(event, ui) {
                          $(this).attr('data-sliding', 'true');
                          $('#devicePopupDialog').attr('data-reload', 'true');
                          return sendSlideEvents($(this));
                        },
                        stop: function(event, ui) {
                          return $(this).attr('data-sliding', 'false');
                        }
                      });
                    }
                  } else if (isValid(actionType['activate']) && isValid(actionType['deactivate'])) {
                    flipId = 'flip-' + deviceId.toString() + actionType['name'];
                    control.append('<label for="' + flipId + '">' + camelCaseToSpaced(actionType['name']) + ':</label>').trigger('create');
                    currentState = actionType['deactivate'];
                    if (deviceInfo[actionType['name']]) {
                      currentState = deviceInfo[actionType['name']];
                    }
                    selectedStr = '';
                    if (actionType['activate'] === currentState) {
                      selectedStr = '" selected="selected';
                    }
                    return control.append('<select id="' + flipId + '" name="' + flipId + '" class="flipControl" data-deviceId="' + deviceId.toString() + '" data-actionName="' + actionType['name'] + '" data-role="flipswitch"><option value="' + actionType['deactivate'] + '">' + actionType['deactivate'] + '</option><option value="' + actionType['activate'] + selectedStr + '">' + actionType['activate'] + '</option></select>').trigger('create');
                  }
                }
              });
            }
            //          if deviceInfo['directUrl']
            //            $('#deviceDirectUrl').attr('href', deviceInfo['directUrl'])
            //            $('#deviceDirectUrlDiv').show() 
            //            $('#devicePopupSettings').show()                
            return $('#devicePopupDialog').popup('reposition', {
              positionTo: 'window'
            });
          });
        } else {
          $('#devicePopupTitle').text('Error').append(cache);
          return $('#devicePopupDialog').popup('reposition', {
            positionTo: 'window'
          });
        }
      });
    });
    $('.signInSignUp').click(function() {
      $.mobile.loading('hide');
      return $('#signinSignupPopupDialog').popup('open');
    });
    editObject = function(title, path, placeholder, dataLink) {
      $.mobile.loading('hide');
      $('#editHomeProps').hide();
      $('#editObjectPopupTitle').text(title);
      $('#editObjectSubmit').attr('data-path', path);
      $('#editObjectSubmit').attr('data-link', dataLink);
      $('#editObjectVal').attr('placeholder', placeholder);
      $('#editObjectVal').removeAttr('value');
      $('#editObjectVal').val('');
      $('#editObjectPopupDialog').popup('open');
      $('#deleteObject').attr('data-objectName', title);
      return $('#deleteObject').attr('data-path', path);
    };
    $('.newHome').click(function() {
      $('#deleteObject').hide();
      return editObject('Add New Home', 'homes', 'Name for new home', 'false');
    });
    $('.newRoom').click(function() {
      $('#deleteObject').hide();
      return editObject('Add New Room', 'rooms', 'Name for new room', 'false');
    });
    $('.editHome').click(function() {
      $('#deleteObject').show();
      editObject($(this).attr('data-homeName'), 'homes/' + getCookie('homeId'), 'New name for ' + $(this).attr('data-homeName'), 'false');
      return $('#editHomeProps').show();
    });
    $('.editRoom').click(function() {
      $('#deleteObject').show();
      return editObject($(this).attr('data-roomName'), 'rooms/' + $(this).attr('data-roomId'), 'New name for ' + $(this).attr('data-roomName'), 'false');
    });
    $('.roomOptionCheckbox').click(function() {
      var postData;
      if (($(this).attr('data-prop') === 'autoOnSunrise') && ($(this).prop('checked'))) {
        $('#autoOffSunrise-' + $(this).attr('data-roomId')).prop('checked', false).checkboxradio("refresh");
      } else if (($(this).attr('data-prop') === 'autoOffSunrise') && ($(this).prop('checked'))) {
        $('#autoOnSunrise-' + $(this).attr('data-roomId')).prop('checked', false).checkboxradio("refresh");
      } else if (($(this).attr('data-prop') === 'autoOnSunset') && ($(this).prop('checked'))) {
        $('#autoOffSunset-' + $(this).attr('data-roomId')).prop('checked', false).checkboxradio("refresh");
      } else if (($(this).attr('data-prop') === 'autoOffSunset') && ($(this).prop('checked'))) {
        $('#autoOnSunset-' + $(this).attr('data-roomId')).prop('checked', false).checkboxradio("refresh");
      }
      postData = {};
      postData['mimic'] = $('#mimic-' + $(this).attr('data-roomId')).prop('checked');
      postData['autoOn'] = $('#autoOn-' + $(this).attr('data-roomId')).prop('checked');
      postData['autoOnSunrise'] = $('#autoOnSunrise-' + $(this).attr('data-roomId')).prop('checked');
      postData['autoOnSunset'] = $('#autoOnSunset-' + $(this).attr('data-roomId')).prop('checked');
      postData['autoOff'] = $('#autoOff-' + $(this).attr('data-roomId')).prop('checked');
      postData['autoOffSunrise'] = $('#autoOffSunrise-' + $(this).attr('data-roomId')).prop('checked');
      postData['autoOffSunset'] = $('#autoOffSunset-' + $(this).attr('data-roomId')).prop('checked');
      return $.taPost('rooms/' + $(this).attr('data-roomId').toString(), postData, function(response) {
        errorCheck(response);
        return false;
      });
    });
    $('.editScene').click(function(event) {
      $('#deleteObject').show();
      return editObject($(this).attr('data-sceneName'), 'scenes/' + $(this).attr('data-sceneId'), 'New name for ' + $(this).attr('data-sceneName'), 'false');
    });
    $(document).on('click', '.renameDevice', function(event) {
      var deviceName, path;
      $('#deleteObject').hide();
      $('#devicePopupDialog').attr('data-reload', 'false');
      $('#devicePopupDialog').popup('close');
      path = $('#deleteDevice').attr('data-path');
      deviceName = $('#deleteDevice').attr('data-ObjectName');
      return setTimeout((function() {
        return editObject(deviceName, path, 'New name for ' + deviceName, 'false');
      }), 100);
    });
    $(document).on('change', '.flipControl', function(event) {
      var postData;
      postData = {};
      postData[$(this).attr('data-actionName')] = $(this).find('option:selected').val();
      return $.taPost('devices/' + $(this).attr('data-deviceId').toString(), postData, function(response) {
        errorCheck(response);
        return false;
      });
    });
    $('#editObjectPopupDialog').on('popupafterclose', function() {
      if ($('#editObjectSubmit').attr('data-link') === 'true') {
        return $('#linkDevicePopupDialog').popup('open');
      }
    });
    $('#editObjectSubmit').click(function() {
      var cache, postData;
      postData = {};
      if ($(this).attr('data-link') === 'true') {
        cache = $('#linkDeviceName').children();
        $('#linkDeviceName').attr('data-name', $('#editObjectVal').val());
        $('#linkDeviceName').text($('#editObjectVal').val()).append(cache);
        $('#editObjectPopupDialog').popup('close');
        return false;
      } else {
        if ($('#editHomeProps').is(":visible")) {
          postData['address'] = {};
          if ($('#editHomePostalCode').val()) {
            postData['address']['postalCode'] = $('#editHomePostalCode').val();
          }
          if ($('#editHomeLat').val()) {
            postData['address']['latitude'] = $('#editHomeLat').val();
          }
          if ($('#editHomeLong').val()) {
            postData['address']['longitude'] = $('#editHomeLong').val();
          }
          if ($('#editObjectVal').val()) {
            postData['name'] = $('#editObjectVal').val();
          }
        } else {
          postData['name'] = $('#editObjectVal').val();
        }
        if (getCookie('homeId')) {
          postData['homeId'] = Number(getCookie('homeId'));
        }
        $.mobile.loading('show');
        return $.taPost($(this).attr('data-path'), postData, function(response) {
          if (errorCheck(response)) {
            if (response['homeId']) {
              if (response['roomId']) {
                window.location.href = '/?homeId=' + response['homeId'] + '&roomId=' + response['roomId'];
              } else {
                window.location.href = '/?homeId=' + response['homeId'];
              }
            } else {
              window.location.href = '/';
            }
            return setTimeout((function() {
              return true;
            }), 100);
          } else {
            if (isValid(response['error'] && response['error']['description'])) {
              $.mobile.loading('hide');
              alertDialog('Error', response['error']['description']);
            } else {
              alertDialog('Error', 'Unexpected error');
            }
            return false;
          }
        });
      }
    });
    $('.deleteObject').click(function(event) {
      var path;
      path = $(this).attr('data-path');
      return confirmDialog('Confirm', 'Delete ' + $(this).attr('data-objectName') + '? Cannot be undone.', function() {
        $.mobile.loading('show');
        return $.taDelete(path, function(response) {
          window.location.href = '/';
          return true;
        });
      }, function() {
        return false;
      });
    });
    $('.settingsForm').submit(function() {
      var postData;
      event.preventDefault();
      if ($('#password').val() !== $('#confirmPassword').val()) {
        alertDialog('Error', 'Password and confirmation do not match');
        $('#password').focus();
        return false;
      } else {
        postData = {};
        postData['userName'] = $('#userName').val();
        postData['emailAddress'] = $('#emailAddress').val();
        if ($('#password').val() !== '') {
          postData['password'] = $('#password').val();
        }
        $.mobile.loading('show');
        return $.post('settings', postData, function(response) {
          $.mobile.loading('hide');
          if (errorCheck(response)) {
            if (response.emailVerified) {
              alertDialog('Success', 'Settings saved');
            } else {
              alertDialog('Success', 'New email verification sent');
            }
            setTimeout((function() {
              return window.location.href = '/';
            }), 4000);
          }
          return false;
        });
      }
    });
    passwordVisible = false;
    $('.togglePassword').click(function() {
      if (passwordVisible) {
        $('.passwordField').prop('type', 'password');
      } else {
        $('.passwordField').prop('type', 'text');
      }
      passwordVisible = !passwordVisible;
      return false;
    });
    $('.emailSigninForm').submit(function() {
      var postData;
      event.preventDefault();
      postData = {};
      postData['userName'] = $('#userName').val();
      $.mobile.loading('show');
      return $.taPost('users/emailsignin', postData, function(response) {
        $.mobile.loading('hide');
        if (errorCheck(response)) {
          alertDialog('Success', 'Email signin link sent');
        }
        return false;
      });
    });
    // this is not working for some reason
    //  $('.selectHome').click ->
    //    setTimeout (->
    //      $('#homeList').trigger('expand') 
    //    ), 100
    $('.signupForm').validate;
    $('.signupForm').submit(function() {
      var postData;
      event.preventDefault();
      if ($('#password').val() !== $('#confirmPassword').val()) {
        alertDialog('Password Error', 'Password and confirmation do not match.');
        $('#password').focus();
        return false;
      } else {
        postData = {};
        postData['userName'] = $('#userName').val();
        postData['emailAddress'] = $('#emailAddress').val();
        postData['password'] = $('#password').val();
        $.mobile.loading('show');
        return $.post('/users/signup', postData, function(response) {
          var data;
          data = response;
          if (!errorCheck(data)) {
            setTimeout((function() {
              return window.location.href = '/users/signup';
            }), 6000);
          } else if (isValid(data['userName']) && isValid(data['emailAddress'])) {
            alertDialog('Success', 'Registration succeeded!');
            setTimeout((function() {
              return window.location.href = '/users/registered';
            }), 4000);
          }
          return false;
        });
      }
    });
    $('.signinForm').submit(function() {
      var path, postData;
      event.preventDefault();
      path = '/';
      if (getCookie('editDeviceTypes')) {
        path = '/devicetypes';
      }
      postData = {};
      postData['userName'] = $('#userName').val();
      postData['password'] = $('#passwordSignin').val();
      $.mobile.loading('show');
      return $.post('/users/signin', postData, function(response) {
        if (errorCheck(response)) {
          window.location.href = path;
          return true;
        } else {
          setTimeout((function() {
            return window.location.href = '/users/signin';
          }), 3000);
          return false;
        }
      });
    });
    $('.signoutButton').click(function() {
      window.location.href = '/users/signout';
      return true;
    });
    deviceType = {};
    actionTypes = [];
    deviceTypeStep = 0;
    yesNoAnswer = 'unknown';
    modeName = '';
    modes = null;
    eventCommandName = '';
    newAttrName = '';
    currentActionType = {};
    singleActionAdd = false;
    $('#yesNoYes').click(function() {
      yesNoAnswer = 'yes';
      return handleDeviceTypeWizardStep();
    });
    $('#yesNoNo').click(function() {
      yesNoAnswer = 'no';
      return handleDeviceTypeWizardStep();
    });
    setTitlePrompt = function(title, prompt) {
      $('.popupTitle').text(title);
      return $('.prompt').text(prompt);
    };
    yesNoPopup = function(title, prompt) {
      setTitlePrompt(title, prompt);
      return $('#yesNoPopupDialog').popup('open');
    };
    getNamePopup = function(title, prompt, placeholder, propName) {
      setTitlePrompt(title, prompt);
      $('#getNameVal').attr('data-propName', propName);
      $('#getNameVal').val('');
      $('#getNameVal').attr('placeholder', placeholder);
      $('#getNamePopupDialog').popup('open');
      return $('#getNameVal').focus();
    };
    getInstructionsPopup = function(title, prompt, placeholder, propName) {
      setTitlePrompt(title, prompt);
      $('#getInstructionsVal').attr('data-propName', propName);
      $('#getInstructionsVal').val('');
      $('#getInstructionsVal').attr('placeholder', placeholder);
      $('#getInstructionsPopupDialog').popup('open');
      return $('#getInstructionsVal').focus();
    };
    modeNames = function() {
      var response;
      response = '';
      $.each(modes, function(modeName, modeValues) {
        if (response !== '') {
          response += ', ';
        }
        return response += modeName;
      });
      return response;
    };
    selectModesPopup = function(title, prompt) {
      var modesContent;
      setTitlePrompt(title, prompt);
      modesContent = $('.selectModesContent');
      modesContent.empty();
      $.each(modes, function(modeName, modeValues) {
        var fieldSetContent;
        fieldSetContent = $('<legend>');
        fieldSetContent.text(modeName.toString() + ':');
        $.each(modeValues, function(index, modeVal) {
          fieldSetContent.append('<input type="checkbox" name="checkbox-' + modeName + modeVal + '" id="checkbox-' + modeName + modeVal + '">').trigger('create');
          return fieldSetContent.append('<label for="checkbox-' + modeName + modeVal + '">' + camelCaseToSpaced(modeVal) + '<label>');
        });
        return modesContent.append(fieldSetContent).trigger('create');
      });
      return $('#selectModesPopupDialog').popup('open');
    };
    gotoStep = function(step) {
      deviceTypeStep = step;
      switch (deviceTypeStep) {
        case 10:
          return getNamePopup('Device Type Name', 'What is the name of the new device type?', 'Enter name here', 'name');
        case 20:
          return yesNoPopup('Hub Device', 'Is "' + deviceType['name'] + '" a hub device which relays messages for other devices?');
        case 30:
          return yesNoPopup('Events / Commands', 'Does a "' + deviceType['name'] + '" report events and/or receive commands other than relaying messages for other devices?');
        case 40:
          return getNamePopup('Category', 'What type of device is a "' + deviceType['name'] + '"? e.g. lighting, thermostat, door lock');
        case 50:
          return yesNoPopup('Events / Commands', 'Does a "' + deviceType['name'] + '" report events and/or receive commands?');
        case 100:
          return yesNoPopup('Modes', 'Does a "' + deviceType['name'] + '" support different modes of operation? e.g. heating mode vs. cooling, input (audio/video/game), units (C/F for temperature)');
        case 110:
          return getNamePopup('Mode', 'What is the name of a single type of mode? e.g. input, units, mode');
        case 120:
          return getNamePopup('Mode', 'What is the name of a single mode of operation for "' + modeName + '"? e.g. heat, video, Celsius');
        case 130:
          return yesNoPopup('More modes', 'Does "' + modeName + '" support additional mode settings besides "' + modes[modeName].toString() + '"?');
        case 140:
          return yesNoPopup('Modes', 'Does the device "' + deviceType['name'] + '" support any additional types of modes besides "' + modeNames() + '"?');
        case 150:
          return getNamePopup('Mode', 'What is the name of an additional single type of mode? e.g. input, units, mode');
        case 1000:
          return getNamePopup('Event / Command', 'What is the name of a single event or command that a "' + deviceType['name'] + '" can send or receive? e.g. power, button, volume, brightness', 'Enter event/command name here', 'name');
        case 1020:
          return selectModesPopup('Modes', 'What modes of operation does "' + eventCommandName + '" apply to? Select all that apply');
        case 1030:
          return yesNoPopup('Range', 'Does "' + eventCommandName + '" support a range of numeric values? e.g. 0 to 100');
        case 1100:
          return getNamePopup('Range', 'What is the minimum value for "' + eventCommandName + '"? e.g. 0', 'Enter minimum value here', 'rangeLow');
        case 1101:
          return getNamePopup('Range', 'What is the maximum value for "' + eventCommandName + '"? e.g. 100', 'Enter maximum value here', 'rangeHigh');
        case 1102:
          return getNamePopup('Range', 'What are the number of decimal points of precision (optional)?', 'Enter number of digits to right of decimal point here', 'rangePrecision');
        case 1103:
          return getNamePopup('Range', 'What is the default step size for adjusting "' + eventCommandName + '" up or down (optional)?', 'Enter step size here', 'rangeStep');
        case 1104:
          return gotoStep(1110);
        case 1110:
        case 2030:
          return yesNoPopup('Command', 'Is "' + eventCommandName + '" a command that can be received and understood by a "' + deviceType['name'] + '"?');
        case 1120:
          return yesNoPopup('Setting', 'Is "' + eventCommandName + '" used as part of normal operation of a "' + deviceType['name'] + '" rather than an infrequently used setting? e.g. sound volume on a TV would be used in normal operation but screen brightness would be an infrequently used setting');
        case 1130:
        case 2110:
          return yesNoPopup('Learning', 'Should "' + eventCommandName + '" be learned by the platform?');
        case 1140:
        case 2120:
          return yesNoPopup('Learning', 'Should the platform guess "' + eventCommandName + '" values vs. only remembering them? e.g. guessing light brightness is appropriate but not stereo volume level');
        case 2000:
          return yesNoPopup('Activation / Deactivation State', 'Does "' + eventCommandName + '" have an activation/dectivation state? e.g. on/off, unlocked/locked');
        case 2010:
          return getNamePopup('Activation State', 'What is the name of the "' + eventCommandName + '" activated state? e.g. on, open, unlock', 'Enter activated state value here', 'activate');
        case 2020:
          return getNamePopup('Deactivation State', 'What is the name of the "' + eventCommandName + '" deactivated state? e.g. off, close, lock', 'Enter deactivated state value here', 'deactivate');
        case 2040:
          return yesNoPopup('Event', 'Is "' + eventCommandName + '" an event or status change that can be sent from / reported by a "' + deviceType['name'] + '"?');
        case 2050:
          return yesNoPopup('Trigger', 'Should "' + eventCommandName + '" events from a "' + deviceType['name'] + '" trigger scene changes involving other devices?');
        case 2060:
          return yesNoPopup('Wake Up Trigger', 'Should "' + eventCommandName + '" events from a "' + deviceType['name'] + '" only serve as a wake up trigger? (for example a motion sensor trigger)');
        case 3000:
          return yesNoPopup('More Events / Commands', 'Are there additional events/commands supported by a "' + deviceType['name'] + '"?');
        case 3005:
          return yesNoPopup('Link code', 'Should "' + deviceType['name'] + '" make use of a 6 digit link code? e.g. a way for a device managed by an external service to authenticate via user interaction (if in doubt choose no)');
        case 3010:
          return getInstructionsPopup('Pre-Link Instructions', 'Instructions to prepare a "' + deviceType['name'] + '" before a linking/pairing command is issued from platform (optional and can be added later)?', 'Enter instructions here', 'preLinkInstructions');
        case 3020:
          return getInstructionsPopup('Post-Link Instructions', 'Instructions to finalize linking/pairing on a "' + deviceType['name'] + '" after a link command is issued from platform (optional and can be added later)?', 'Enter instructions here', 'postLinkInstructions');
        case 3030:
          return yesNoPopup('Additional Attributes', 'Would you like to add additional optional attributes to "' + deviceType['name'] + '" such as model name or version number? Can also be added later.');
        case 3040:
          return getNamePopup('Attribute Name', 'What is the name of the additional attribute?', 'Enter attribute name here', '');
        case 3050:
          return getNamePopup('Attribute Value', 'What is the value for "' + newAttrName + '"?', 'Enter attribute value here', newAttrName);
        case 3060:
          return yesNoPopup('Additional Attributes', 'Would you like to add another attribute for "' + deviceType['name'] + '"?');
        case 4000:
          deviceType['actionTypes'] = actionTypes;
          if (modes) {
            deviceType['modes'] = modes;
          }
          return saveAsDraft();
      }
    };
    handleYesNo = function(yesNoAnswer, yesStep, noStep) {
      if (yesNoAnswer === 'yes') {
        return gotoStep(yesStep);
      } else {
        return gotoStep(noStep);
      }
    };
    addProp = function(element) {
      if (!($('#getNameVal').val() === '') && !($('#getNameVal').attr('data-propName') === '')) {
        return element[$('#getNameVal').attr('data-propName')] = $('#getNameVal').val();
      }
    };
    addNumProp = function(element) {
      if (!($('#getNameVal').val() === '') && !($('#getNameVal').attr('data-propName') === '')) {
        return element[$('#getNameVal').attr('data-propName')] = parseInt($('#getNameVal').val());
      }
    };
    handleDeviceTypeWizardStep = function() {
      $("div[data-role='popup']").popup('close');
      return setTimeout((function() {
        switch (deviceTypeStep) {
          case 0:
            return handleYesNo(yesNoAnswer, 10);
          case 10:
            if ($('#getNameVal').val() === '') {
              return gotoStep(deviceTypeStep);
            } else {
              deviceType['name'] = $('#getNameVal').val();
              return gotoStep(40);
            }
            break;
          case 20:
            deviceType['isHub'] = yesNoAnswer === 'yes';
            return handleYesNo(yesNoAnswer, 30, 50);
          case 30:
          case 50:
            return handleYesNo(yesNoAnswer, 100, 3005);
          case 40:
            deviceType['category'] = $('#getNameVal').val();
            return gotoStep(20);
          case 100:
            modes = null;
            return handleYesNo(yesNoAnswer, 110, 1000);
          case 110:
          case 150:
            if ($('#getNameVal').val() === '') {
              return gotoStep(deviceTypeStep);
            } else {
              modes = {};
              modeName = $('#getNameVal').val();
              modes[modeName] = [];
              return gotoStep(120);
            }
            break;
          case 120:
            if ($('#getNameVal').val() === '') {
              return gotoStep(deviceTypeStep);
            } else {
              modes[modeName].push($('#getNameVal').val());
              return gotoStep(130);
            }
            break;
          case 130:
            return handleYesNo(yesNoAnswer, 120, 140);
          case 140:
            return handleYesNo(yesNoAnswer, 150, 1000);
          case 1000:
            if ($('#getNameVal').val() === '') {
              return gotoStep(deviceTypeStep);
            } else {
              eventCommandName = $('#getNameVal').val();
              currentActionType = {
                name: eventCommandName,
                guess: false,
                isTrigger: false
              };
              if (modes) {
                return gotoStep(1020);
              } else {
                return gotoStep(1120);
              }
            }
            break;
          case 1020:
            if (modes) {
              $.each(modes, function(modeName, modeValues) {
                return $.each(modeValues, function(index, modeVal) {
                  if ($('#checkbox-' + modeName + modeVal).prop('checked')) {
                    if (!currentActionType['modes']) {
                      currentActionType['modes'] = {};
                    }
                    if (!currentActionType['modes'][modeName]) {
                      currentActionType['modes'][modeName] = [];
                    }
                    return currentActionType['modes'][modeName].push(modeVal);
                  }
                });
              });
            }
            return gotoStep(1120);
          case 1030:
            return handleYesNo(yesNoAnswer, 1100, 2010);
          case 1100:
          case 1101:
          case 1102:
          case 1103:
            addNumProp(currentActionType);
            return gotoStep(deviceTypeStep + 1);
          case 1110:
            currentActionType['receive'] = yesNoAnswer === 'yes';
            return handleYesNo(yesNoAnswer, 1130, 2000);
          case 1120:
            currentActionType['isSetting'] = yesNoAnswer === 'no';
            return gotoStep(1030);
          case 1130:
          case 2110:
            currentActionType['learn'] = yesNoAnswer === 'yes';
            return handleYesNo(yesNoAnswer, deviceTypeStep + 10, deviceTypeStep === 1130 ? 2000 : 2040);
          case 1140:
          case 2120:
            currentActionType['guess'] = yesNoAnswer === 'yes';
            return gotoStep(deviceTypeStep === 1140 ? 2000 : 2040);
          case 2000:
            return handleYesNo(yesNoAnswer, 2010, 3000);
          case 2010:
            addProp(currentActionType);
            return gotoStep(2020);
          case 2020:
            addProp(currentActionType);
            if (!currentActionType.hasOwnProperty('receive')) {
              return gotoStep(2030);
            } else if (currentActionType['receive'] && !currentActionType['isSetting'] && !currentActionType.hasOwnProperty('learn')) {
              return gotoStep(2110);
            } else {
              return gotoStep(2040);
            }
            break;
          case 2030:
            currentActionType['receive'] = yesNoAnswer === 'yes';
            if (currentActionType['receive'] && !currentActionType['isSetting'] && !currentActionType.hasOwnProperty('learn')) {
              return gotoStep(2110);
            } else {
              return gotoStep(2040);
            }
            break;
          case 2040:
            return handleYesNo(yesNoAnswer, 2050, 3000);
          case 2050:
            currentActionType['isTrigger'] = yesNoAnswer === 'yes';
            return handleYesNo(yesNoAnswer, 2060, 3000);
          case 2060:
            currentActionType['isWakeUpOnly'] = yesNoAnswer === 'yes';
            return gotoStep(3000);
          case 3000:
            actionTypes.push(currentActionType);
            return handleYesNo(yesNoAnswer, 1000, 3005);
          case 3005:
            deviceType['useLinkCode'] = yesNoAnswer === 'yes';
            return handleYesNo(yesNoAnswer, 3020, 3010);
          case 3010:
          case 3020:
            if (!($('#getInstructionsVal').val() === '') && !($('#getInstructionsVal').attr('data-propName') === '')) {
              deviceType[$('#getInstructionsVal').attr('data-propName')] = $('#getInstructionsVal').val();
            }
            return gotoStep(deviceTypeStep + 10);
          case 3030:
            return handleYesNo(yesNoAnswer, 3040, 4000);
          case 3040:
            if ($('#getNameVal').val() === '') {
              return gotoStep(deviceTypeStep);
            } else {
              newAttrName = $('#getNameVal').val();
              return gotoStep(3050);
            }
            break;
          case 3050:
            addProp(deviceType);
            return gotoStep(3060);
          case 3060:
            return handleYesNo(yesNoAnswer, 3040, 4000);
        }
      }), 100);
    };
    gotoPrevStep = function() {
      $("div[data-role='popup']").popup('close');
      return setTimeout((function() {
        switch (deviceTypeStep) {
          case 10:
          case 120:
          case 130:
          case 140:
          case 1000:
          case 1030:
          case 1100:
          case 2000:
          case 2040:
          case 3000:
          case 3040:
            return gotoStep(deviceTypeStep);
          case 100:
            return gotoStep(20);
          case 1020:
            return gotoStep(1000);
          case 1100:
            return gotoStep(1030);
          case 1101:
          case 1102:
          case 1103:
          case 1104:
            return gotoStep(deviceTypeStep - 1);
          default:
            return gotoStep(deviceTypeStep - 10);
        }
      }), 100);
    };
    $('.newDeviceType').click(function() {
      deviceType = {};
      actionTypes = [];
      modes = null;
      return gotoStep(10);
    });
    $('.prevButton').click(function() {
      return gotoPrevStep();
    });
    $('.getNameForm').submit(function(event) {
      event.preventDefault();
      return handleDeviceTypeWizardStep();
    });
    $('.getInstructionsForm').submit(function(event) {
      event.preventDefault();
      return handleDeviceTypeWizardStep();
    });
    $('.selectModesForm').submit(function(event) {
      event.preventDefault();
      return handleDeviceTypeWizardStep();
    });
    $('.cancelButton').click(function() {
      if (deviceTypeStep < 100 && !singleActionAdd) {
        return confirmDialog('Confirm', 'Cancel creating new device type?', function() {
          $.mobile.loading('show');
          return setTimeout((function() {
            return window.location.reload();
          }), 100);
        }, function() {
          return false;
        });
      } else {
        return $("div[data-role='popup']").popup('close');
      }
    });
    $('.actionTypeCancelButton').click(function() {
      if ($('#actionTypeInfo').attr('data-edited') === 'true') {
        return confirmDialog('Confirm', 'Save changes?', function() {
          var rangePrecision;
          rangePrecision = 1;
          if ($('#attr-rangePrecision').val() && parseFloat($('#attr-rangePrecision').val()) !== 0) {
            rangePrecision = parseFloat($('#attr-rangePrecision').val()) * 10;
          }
          // this needs work - checkboxes are not being saved correctly, nor are modes for individual actions...
          $('.actionTypeAttr').each(function() {
            if ($(this).is('input:text')) {
              if ($(this).attr('id') === 'attr-rangeLow' || $(this).attr('id') === 'attr-rangeHigh' || $(this).attr('id') === 'attr-rangeStep') {
                if ($(this).val() && !isNaN($(this).val()) && $(this).val() !== '' && rangePrecision !== 0) {
                  //                  currentActionType[$(this).attr('name').substring(5)] = (parseFloat($(this).val()) * rangePrecision).toString()
                  return currentActionType[$(this).attr('name').substring(5)] = parseFloat($(this).val()) * rangePrecision;
                }
              } else {
                return currentActionType[$(this).attr('name').substring(5)] = $(this).val();
              }
            } else if ($(this).is('input:checkbox')) {
              return currentActionType[$(this).attr('name').substring(5)] = $(this).prop('checked');
            }
          });
          //              currentActionType[$(this).attr('name').substring(5)] = $(this).prop('checked').toString()
          currentActionType['rangePrecision'] = (rangePrecision !== 0 && rangePrecision !== 1 ? rangePrecision : void 0);
          return saveAsDraft();
        }, function() {
          return confirmDialog('Confirm', 'Discard changes?', function() {
            $("div[data-role='popup']").popup('close');
            return false;
          }, function() {
            return false;
          });
        });
      } else {
        $("div[data-role='popup']").popup('close');
        return false;
      }
    });
    $('.actionTypeAttr').change(function() {
      return $('#actionTypeInfo').attr('data-edited', 'true');
    });
    getDeviceTypeInfo = function(cb) {
      var path;
      if (getCookie('deviceTypeUuid')) {
        path = 'deviceTypes/' + getCookie('deviceTypeUuid');
      } else {
        path = 'deviceTypes/' + getCookie('deviceTypeDraftId') + '/draft';
      }
      $.mobile.loading('show');
      return $.taGet(path, function(response) {
        $.mobile.loading('hide');
        deviceType = response;
        return cb();
      });
    };
    $('.actionTypePopup').click(function() {
      var actionTypeName;
      $("div[data-role='popup']").popup('close');
      actionTypeName = $(this).attr('data-actionTypeName');
      getDeviceTypeInfo(function() {
        if (deviceType['deviceTypeUuid']) {
          $('.popupTitle').text('Action Type (read only)');
          $('.actionTypeAttr').attr('disabled', true).trigger('refresh');
        } else {
          $('.popupTitle').text('Action Type');
          $('.actionTypeAttr').attr('disabled', false).trigger('refresh');
        }
        return $.each(deviceType['actionTypes'], function(index, atValue) {
          var rangePrecision;
          if (atValue['name'] === actionTypeName) {
            currentActionType = atValue;
            rangePrecision = parseInt(currentActionType['rangePrecision']) * 10;
            if (!rangePrecision) {
              rangePrecision = 1;
            }
            return $.each(atValue, function(key, val) {
              var el;
              el = $('#attr-' + key);
              if (el.is('input:text')) {
                if (val && rangePrecision !== 0 && (key === 'rangeLow' || key === 'rangeHigh' || key === 'rangeStep')) {
                  val = parseInt(val);
                  if (rangePrecision !== 0) {
                    val = val / rangePrecision;
                  }
                } else if (key === 'modes') {
                  val = JSON.stringify(val);
                }
                return el.val(val).trigger('refresh');
              } else if (el.is('input:checkbox')) {
                return el.prop('checked', val.toString() === 'true').checkboxradio('refresh');
              }
            });
          }
        });
      });
      return setTimeout((function() {
        return $('#viewActionTypePopupDialog').popup('open');
      }), 100);
    });
    $('#deleteActionType').click(function() {
      return getDeviceTypeInfo(function() {
        return confirmDialog('Confirm', 'Delete action type "' + $('#attr-name').val() + '"?', function() {
          actionTypes = [];
          $.each(deviceType['actionTypes'], function(index, atValue) {
            if (atValue['name'] !== $('#attr-name').val()) {
              return actionTypes.push(atValue);
            }
          });
          deviceType['actionTypes'] = actionTypes;
          return saveAsDraft();
        }, function() {
          return false;
        });
      });
    });
    $('#addDeviceTypeAttribute').click(function() {
      return getDeviceTypeInfo(function() {
        $('#deviceTypeElements').attr('data-edited', 'true');
        return gotoStep(3040);
      });
    });
    $('#addDeviceTypeAction').click(function() {
      return getDeviceTypeInfo(function() {
        actionTypes = deviceType['actionTypes'];
        modes = deviceType['modes'];
        if (!actionTypes) {
          actionTypes = [];
        }
        $('#deviceTypeElements').attr('data-edited', 'true');
        singleActionAdd = true;
        return gotoStep(1000);
      });
    });
    saveAsDraft = function() {
      return $.taPost('deviceTypes/draft', deviceType, function(response) {
        if (response['draftId']) {
          window.location.href = '/deviceTypes/edit?deviceTypeDraftId=' + response['draftId'].toString();
        } else {
          window.location.href = '/deviceTypes/edit';
        }
        return true;
      });
    };
    updateDtSearch = function() {
      if ($('#dtSearchText').val() === '') {
        window.location.href = '/deviceTypes?showAll=true';
      } else {
        window.location.href = '/deviceTypes?filter=' + fixedEncodeURI($('#dtSearchText').val());
      }
      return true;
    };
    dtSearchTextBlur = false;
    $('.dtButton').click(function(event) {
      $.mobile.loading('show');
      if ($(this).attr('data-deviceTypeUuid')) {
        window.location.href = '/deviceTypes/edit?deviceTypeUuid=' + $(this).attr('data-deviceTypeUuid');
      } else if ($(this).attr('data-deviceTypeDraftId')) {
        window.location.href = '/deviceTypes/edit?deviceTypeDraftId=' + $(this).attr('data-deviceTypeDraftId');
      }
      return true;
    });
    $('#dtSearchText').change(function() {
      return dtSearchTextBlur = true;
    });
    $('#dtSearchText').blur(function() {
      if (dtSearchTextBlur) {
        return updateDtSearch();
      }
    });
    $('.deviceTypeField').change(function() {
      if ($(this).attr('data-propName') !== 'deviceTypeUuid') {
        return $('#deviceTypeElements').attr('data-edited', 'true');
      }
    });
    $('.deviceTypeEditorBack').click(function() {
      if ($('#deviceTypeElements').attr('data-edited') === 'true') {
        return confirmDialog('Confirm', 'Discard changes?', function() {
          $.mobile.loading('show');
          return setTimeout((function() {
            window.location.href = '/devicetypes';
            return true;
          }), 100);
        }, function() {
          return false;
        });
      } else {
        window.location.href = '/devicetypes';
        return true;
      }
    });
    loadDeviceTypeWithChanges = function(cb) {
      return getDeviceTypeInfo(function() {
        $('.deviceTypeField').each(function() {
          if ($(this).is('input:text') || $(this).is('textarea')) {
            return deviceType[$(this).attr('data-propName')] = $(this).val();
          } else if ($(this).is('input:checkbox')) {
            return deviceType[$(this).attr('data-propName')] = $(this).prop('checked');
          }
        });
        //          deviceType[$(this).attr('data-propName')] = $(this).prop('checked').toString()
        return cb();
      });
    };
    $('#editDeviceTypeSaveDraft').click(function() {
      return loadDeviceTypeWithChanges(function() {
        if (deviceType['deviceTypeUuid']) {
          return confirmDialog('New Device Type', 'Treat as new device type?', function() {
            deviceType['deviceTypeUuid'] = void 0;
            deviceType['ownerUserName'] = void 0;
            deviceType['ownerUserId'] = void 0;
            deviceType['created'] = void 0;
            deviceType['name'] = deviceType['name'] + ' (copy)';
            return saveAsDraft();
          }, function() {
            return saveAsDraft();
          });
        } else {
          return saveAsDraft();
        }
      });
    });
    registerDeviceType = function() {
      var path;
      path = 'deviceTypes';
      if (deviceType['deviceTypeUuid'] && deviceType['deviceTypeUuid'] !== '') {
        path = 'deviceTypes/' + deviceType['deviceTypeUuid'];
      }
      $.mobile.loading('show');
      return $.taPost(path, deviceType, function(response) {
        if (isValid(response['error'] && response['error']['message'])) {
          $.mobile.loading('hide');
          alertDialog('Error', response['error']['message']);
          return false;
        } else {
          window.location.href = '/devicetypes';
          return true;
        }
      });
    };
    $('#editDeviceTypeRegister').click(function() {
      return loadDeviceTypeWithChanges(function() {
        if (!deviceType['actionTypes'] || deviceType['actionTypes'] === null) {
          deviceType['actionTypes'] = [];
        }
        if (deviceType['deviceTypeUuid']) {
          return confirmDialog('Confirm', 'Re-register device type with changes?', function() {
            return registerDeviceType();
          }, function() {
            return false;
          });
        } else {
          return confirmDialog('Confirm', 'Register device type? Action types cannot be changed for this device type after registration.', function() {
            if (!deviceType['published'] || deviceType['published'] === 'false') {
              return confirmDialog('Confirm', 'Would you like the new device type to be discoverable (a.k.a. published)? Can be changed later.', function() {
                deviceType['published'] = true;
                return registerDeviceType();
              }, function() {
                return registerDeviceType();
              });
            } else {
              return registerDeviceType();
            }
          }, function() {
            return false;
          });
        }
      });
    });
    $('#deleteDeviceTypeSubmit').click(function() {
      return getDeviceTypeInfo(function() {
        var prompt;
        if (deviceType['draftId']) {
          prompt = 'Delete "' + deviceType['name'] + '" draft type?';
        } else {
          prompt = 'Delete "' + deviceType['name'] + '" type? If device type already in use, consider deprecating instead.';
        }
        return confirmDialog('Confirm', prompt, function() {
          $.mobile.loading('show');
          if (deviceType['deviceTypeUuid']) {
            return $.taDelete('deviceTypes/' + deviceType['deviceTypeUuid'] + '/draft', function(response) {
              window.location.href = '/devicetypes';
              return true;
            });
          } else if (deviceType['draftId']) {
            return $.taDelete('deviceTypes/' + deviceType['draftId'] + '/draft', function(response) {
              window.location.href = '/devicetypes';
              return true;
            });
          } else {
            window.location.href = '/deviceTypes/edit';
            return true;
          }
        }, function() {
          return false;
        });
      });
    });
    helpStep = 0;
    $('.popupCancelButton').click(function() {
      return $("div[data-role='popup']").popup('close');
    });
    $('.helpButton').click(function() {
      if (getCookie('userId')) {
        helpStep = 10;
      } else {
        helpStep = 0;
      }
      return gotoHelpStep(helpStep);
    });
    $('#helpYes').click(function() {
      yesNoAnswer = 'yes';
      return handleHelpStep();
    });
    $('#helpNo').click(function() {
      yesNoAnswer = 'no';
      return handleHelpStep();
    });
    yesNoHelpPopup = function(title, prompt, yesOption, noOption) {
      setTitlePrompt(title, prompt);
      $('#helpYes').text(yesOption != null ? yesOption : 'Yes');
      $('#helpNo').show();
      $('#helpNo').text(noOption != null ? noOption : 'No');
      return $('#yesNoHelpPopupDialog').popup('open');
    };
    helpPopupInfo = function(title, prompt) {
      setTitlePrompt(title, prompt);
      $('#helpYes').text('Close');
      $('#helpNo').hide();
      return $('#yesNoHelpPopupDialog').popup('open');
    };
    gotoHelpStep = function(step) {
      var postData;
      helpStep = step;
      switch (helpStep) {
        case 0:
          return yesNoHelpPopup('Sign in', 'You are not currently signed in. To get started you need to be signed into an account. Would you like to sign in or setup an account?');
        case 10:
          return yesNoHelpPopup('Pairing', 'Do you need help "pairing" a device to your home?');
        case 20:
        case 410:
          return yesNoHelpPopup('Type of device', 'Is the device you need help with a Luminode Dimmer Switch?');
        case 30:
          return yesNoHelpPopup('Pair Luminode', 'Is this the first Luminode you are attempting to pair with or do you already have one or more already working?', 'First One', 'Others working');
        case 40:
          return yesNoHelpPopup('Pair Luminode', 'Tap the Luminode you want to pair with to turn it either on or off. Did the indicator on the front of it turn a solid red color?');
        case 50:
          return yesNoHelpPopup('Pair Luminode', 'Using your mobile device try connecting to an open WiFi network named "ThinkAutoNew-(some id number)". After you connect to that network your mobile device should be automatically redirected to a WiFi setup process. Have you already tried this and ran into an issue?');
        case 60:
          return yesNoHelpPopup('Pair Luminode', 'Did your mobile device connect to the ThinkAutoNew- network but not redirect you to a setup screen?');
        case 70:
          return yesNoHelpPopup('Pair Luminode', 'Let\'s tell your mobile device to "forget" the ThinkAutoNew- network (exact process varies depending on your mobile device wifi settings). Then attempt to reconnect to the same network again. Have you already tried this and want to try something else?');
        case 80:
          return yesNoHelpPopup('Pair Luminode', 'Let\'s try restarting your Luminode. Press both the up/on button and the down/off button on the Luminode at the same time, which may require a slightly firm press, then release. After a few seconds press one of the buttons on the Luminode to turn the indicator red again. Then attempt to connect to the ThinkAutoNew- network again. Have you already tried this and want to try something else?');
        case 90:
          return yesNoHelpPopup('Pair Luminode', 'Did the indicator turn cyan (light blue)?');
        case 100:
          return yesNoHelpPopup('Pair Luminode', 'This may mean that your Luminode is attempting to connect to a network belonging to a neighbor. Try tapping your Luminode again until the indicator turns red. Has the indicator turned red?');
        case 120:
          return helpPopupInfo('Pair Luminode', 'Let\'s try doing a network reset on your Luminode. Press the down/off button and hold it for at least 20 seconds. You can release it when the light that your Luminode controls flashes and the indicator on the front blinks a sequence of different colors. After this, wait a few more seconds then tap the Luminode to begin attempting earlier steps. You can restart this help system if you have trouble or reach out to us via email at support@thinkautomatic.com');
        case 130:
          return helpPopupInfo('Pair Luminode', 'After following the steps on the setup screen you should see a message popup on this web app indicating that a device has been discovered (you may need to tap the refresh button). Tap on the word "Link" and follow the instructions. Once linked the indicator on the Luminode should change several different colors as it sets itself up and may not be responsive for up to a minute. This is normal. You can restart this help system if you have trouble or reach out to us via email at support@thinkautomatic.com');
        case 200:
          return yesNoHelpPopup('Pair Luminode', 'Tap the Luminode you are attempting to pair with to turn it either on or off. Did the indicator on the front of it turn cyan (light blue)?');
        case 210:
          return yesNoHelpPopup('Pair Luminode', 'Is it blinking or is it staying on solid cyan?', 'blinking', 'solid');
        case 220:
          return yesNoHelpPopup('Pair Luminode', 'This means it is having trouble connecting. Would you like me to try to remedy this problem or would you like to try another approach?', 'Try remedy', 'Other approach');
        case 230:
          postData = {};
          postData['troubleshoot'] = '1';
          $.taPost('commands/' + getCookie('homeId').toString(), postData, function(response) {
            return errorCheck(response);
          });
          return yesNoHelpPopup('Action taken', 'I tried a remedy on my end. Please wait up to about 20 seconds then tap the Luminode again. The indicator may turn red, in which case tap it again to see if it turns cyan. Did it turn cyan?');
        case 240:
          return yesNoHelpPopup('Pair Luminode', 'Did you see a message popup on this web app saying that a new device has been discovered (you may need to tap the refresh button)?');
        case 250:
          return helpPopupInfo('Pair Luminode', 'Tap on the word "Link" and follow the instructions. Once linked the indicator on the Luminode should change several different colors as it sets itself up and may not be responsive for up to a minute. This is normal. You can restart this help system if you have trouble or reach out to us via email at support@thinkautomatic.com');
        case 260:
          return yesNoHelpPopup('Pair Luminode', 'This may mean that your Luminode is attempting to connect to a Luminode network belonging to a neighbor. Try tapping your Luminode again. Did it blink and turn cyan again or did it turn red?', 'Cyan', 'Red');
        case 270:
          return helpPopupInfo('Pair Luminode', 'At this point you can either try connecting your mobile device directly to the ThinkAutoNew- network or tap the Luminode again and repeat the previous steps. If you are still unable to pair your Luminode please reach out to us at support@thinkautomatic.com');
        case 300:
          return helpPopupInfo('Installation', 'So sorry you are having trouble installing your device. Please consult any documentation provided by your device\'s manufacturer. Please also feel free to reach out to us via email at support@thinkautomatic.com for additional support.');
        case 400:
          return yesNoHelpPopup('Installation', 'Do you need help physically installing a device?');
        case 500:
          return helpPopupInfo('Warning', 'An electrician guide should have been included with your Luminode when you purchased it. Unless you are already familiar with how to do basic household electrical work it is recommended that you consult a professional electrician.');
        case 1000:
          return helpPopupInfo('Contact us', 'So sorry you are having trouble. Please reach out to us via email at support@thinkautomatic.com');
      }
    };
    handleHelpYesNo = function(yesNoAnswer, yesStep, noStep) {
      if (yesNoAnswer === 'yes') {
        return gotoHelpStep(yesStep);
      } else {
        return gotoHelpStep(noStep);
      }
    };
    return handleHelpStep = function() {
      $("div[data-role='popup']").popup('close');
      return setTimeout((function() {
        switch (helpStep) {
          case 0:
            if (yesNoAnswer === 'yes') {
              return setTimeout((function() {
                return window.location.href = '/users/signin';
              }), 100);
            }
            break;
          case 10:
            return handleHelpYesNo(yesNoAnswer, 20, 400);
          case 20:
            return handleHelpYesNo(yesNoAnswer, 30, 300);
          case 30:
            return handleHelpYesNo(yesNoAnswer, 40, 200);
          case 40:
            return handleHelpYesNo(yesNoAnswer, 50, 90);
          case 50:
            return handleHelpYesNo(yesNoAnswer, 60, 130);
          case 60:
            return handleHelpYesNo(yesNoAnswer, 70, 130);
          case 70:
            return handleHelpYesNo(yesNoAnswer, 80, 60);
          case 80:
            return handleHelpYesNo(yesNoAnswer, 120, 60);
          case 90:
            return handleHelpYesNo(yesNoAnswer, 100, 120);
          case 100:
            return handleHelpYesNo(yesNoAnswer, 50, 120);
          case 110:
            return handleHelpYesNo(yesNoAnswer, 120, 10);
          case 200:
            return handleHelpYesNo(yesNoAnswer, 210, 120);
          case 210:
            return handleHelpYesNo(yesNoAnswer, 220, 240);
          case 220:
            return handleHelpYesNo(yesNoAnswer, 230, 120);
          case 230:
            return handleHelpYesNo(yesNoAnswer, 240, 120);
          case 240:
            return handleHelpYesNo(yesNoAnswer, 250, 260);
          case 260:
            return handleHelpYesNo(yesNoAnswer, 240, 270);
          case 400:
            return handleHelpYesNo(yesNoAnswer, 410, 1000);
          case 410:
            return handleHelpYesNo(yesNoAnswer, 500, 300);
        }
      }), 100);
    };
  });

}).call(this);
